./datasets/breast-cancer.arff
learning tree
Creating a random tree
Wrote profile results to breiman.py.lprof
Timer unit: 1e-06 s

Total time: 7.36481 s
File: /home/cs-students/18nde1/random-forest-pruning/decision_tree.py
Function: __init__ at line 76

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                                   @profile
    77                                                   def __init__(self, database, weights, attributes, max_depth, attribute_selector, depth=1):
    78     29618      35025.0      1.2      0.5              self.database = database
    79     29618      32844.0      1.1      0.4              def info_gain(x): return information_gain(database, weights, x)
    80     29618     163257.0      5.5      2.2              selected_attrs = attribute_selector(attributes)
    81     29618      32406.0      1.1      0.4              if len(selected_attrs) == 1:
    82     29618      33065.0      1.1      0.4                  self.best_attribute = selected_attrs[0]
    83                                                       else:
    84                                                           self.best_attribute = max(selected_attrs, key=info_gain)
    85     29618      54150.0      1.8      0.7              other_attributes = [attr for attr in attributes if attr != self.best_attribute]
    86                                           
    87     29618      43684.0      1.5      0.6              debug_print('  ' * depth + self.best_attribute)
    88     29618      33008.0      1.1      0.4              if len(other_attributes) == 0 or (max_depth is not None and depth >= max_depth):
    89                                                           # For each value of the best attribute, determine the majority class. In
    90                                                           # `self.predictions`, map that attribute value to the majority class.
    91     21124      24614.0      1.2      0.3                  self.predictions = {}
    92     21124      28929.0      1.4      0.4                  attr_index = database.ordered_attributes.index(self.best_attribute)
    93     88643     103670.0      1.2      1.4                  for attr_value in range(len(database.attributes[self.best_attribute])):
    94     67520    2569143.0     38.1     34.9                      filtered_indices = [index for index, ex in enumerate(database.data) if ex[attr_index] == attr_value]
    95     67519     806173.0     11.9     10.9                      filtered_data = [database.data[i] for i in filtered_indices]
    96     67519     639976.0      9.5      8.7                      filtered_weights = [weights[i] for i in filtered_indices]
    97                                           
    98     67519     826240.0     12.2     11.2                      neg_examples = [ex[-1] == 0 for ex in filtered_data]
    99                                           
   100     67519    1414805.0     21.0     19.2                      weighted_neg = inner(neg_examples, filtered_weights)
   101     67519     130979.0      1.9      1.8                      prediction = int(weighted_neg < (sum(filtered_weights) / 2))
   102     67519      76426.0      1.1      1.0                      self.predictions[attr_value] = prediction
   103     67519     127148.0      1.9      1.7                      debug_print('  ' * depth + 'attr_value {} for {} => {}'.format(attr_value, self.best_attribute, prediction))
   104                                                       else:
   105      8494       9810.0      1.2      0.1                  self.predictions = {}
   106      8494      12217.0      1.4      0.2                  attr_index = database.ordered_attributes.index(self.best_attribute)
   107     38103      43870.0      1.2      0.6                  for attr_value in range(len(database.attributes[self.best_attribute])):
   108     29617      52884.0      1.8      0.7                      debug_print('  ' * depth + 'attr_value {} for {}'.format(attr_value, self.best_attribute))
   109     29617      70484.0      2.4      1.0                      self.predictions[attr_value] = DecisionTree.Node(database, weights, other_attributes, max_depth, attribute_selector, depth=depth + 1)

